MRT_1F <- c(517.1468515630205, 85.13094142168089, 30.333207896694553, 12.694776264558937, 3.3041601673945418, 1.1823111717498882, 1.1892293502386786)
MRT_3F <- c(156.68929936163462, 11.540837783562276, 0.4512835621696538, 0.4509797929766453, 0.4502068233039181, 0.4496185276300172, 0.4543157082191288)
MRT_5F <- c(83.90319666471157, 0.3068151086494968, 0.30522314133037304, 0.3072588968084928, 0.30655265997285697, 0.3055812715727718, 0.3053297166713006)
MRT_10F <- c(29.55430642951759, 0.19832832665772515, 0.1971923924717474, 0.19796648905716516, 0.19615594370806338, 0.2034569237883263, 0.19617420889447737)
MRT_15F <- c(11.317736530583566, 0.167364215666193, 0.16172168266811013, 0.16701085329580515, 0.1598052657153692, 0.1645934043532696, 0.16216563797118075)
MRT_sem_F <- c(11.93430909937736, 0.6095414637034009, 0.6060645101029295, 0.612167181646899, 0.6146761002685637, 0.6096747087200697, 0.6125810476877268)
clock <- c(0.1, 0.5, 1, 1.5, 2, 2.5, 3)
plot(clock, MRT_1F, type = "o", col = "blue", ylim = c(min(MRT_1F, MRT_3F, MRT_5F, MRT_10F, MRT_15F, MRT_sem_F), max(MRT_1F)), ylab = "Response Time (Sec)", xlab = "Time Between Things Requests (seconds)")
lines(clock, MRT_3F, type = "o", col = "red")
lines(clock, MRT_5F, type = "o", col = "green")
lines(clock, MRT_10F, type = "o", col = "purple")
lines(clock, MRT_15F, type = "o", col = "orange")
lines(clock, MRT_sem_F, type = "o", col = "black")
legend("topright", legend = c("1 Fog", "3 Fogs", "5 Fogs", "10 Fogs", "15 Fogs", "w/o Fog"), col = c("blue", "red", "green", "purple", "orange", "black"), lty = 1, pch = 1)
barplot(matrix(c(MRT_sem_F, MRT_1F), nrow = 2, byrow = TRUE), beside = TRUE, col = c("#E6E6E6", "#666666"), log = "y", names.arg = clock, ylab = "Response Time (s)", xlab = "Time between Things requests")
legend("topright", legend = c("w/o Fog", "1 Fog"), col = c("gray", "black"), pch = c(0,15))
barplot(matrix(c(MRT_sem_F, MRT_3F), nrow = 2, byrow = TRUE), beside = TRUE, col = c("#E6E6E6", "#666666"), log = "y", names.arg = clock, ylab = "Response Time (s)", xlab = "Time between Things requests")
legend("topright", legend = c("w/o Fog", "3 Fogs"), col = c("gray", "black"), pch = c(0,15))
barplot(matrix(c(MRT_sem_F, MRT_3F), nrow = 2, byrow = TRUE), beside = TRUE, col = c("#E6E6E6", "#666666"), log = "y", names.arg = clock, ylab = "Response Time (s)", xlab = "Time between Things requests")
legend("topright", legend = c("w/o Fog", "3 Fogs"), col = c("gray", "black"), pch = c(0,15))
barplot(matrix(c(MRT_sem_F, MRT_5F), nrow = 2, byrow = TRUE), beside = TRUE, col = c("#E6E6E6", "#666666"), log = "y", names.arg = clock, ylab = "Response Time (s)", xlab = "Time between Things requests")
legend("topright", legend = c("w/o Fog", "5 Fogs"), col = c("gray", "black"), pch = c(0,15))
MRT_1F <- c(517.1468515630205, 85.13094142168089, 30.333207896694553, 12.694776264558937, 3.3041601673945418, 1.1823111717498882, 1.1892293502386786)
MRT_3F <- c(156.68929936163462, 11.540837783562276, 0.4512835621696538, 0.4509797929766453, 0.4502068233039181, 0.4496185276300172, 0.4543157082191288)
MRT_5F <- c(83.90319666471157, 0.3068151086494968, 0.30522314133037304, 0.3072588968084928, 0.30655265997285697, 0.3055812715727718, 0.3053297166713006)
MRT_10F <- c(29.55430642951759, 0.19832832665772515, 0.1971923924717474, 0.19796648905716516, 0.19615594370806338, 0.2034569237883263, 0.19617420889447737)
MRT_15F <- c(11.317736530583566, 0.167364215666193, 0.16172168266811013, 0.16701085329580515, 0.1598052657153692, 0.1645934043532696, 0.16216563797118075)
MRT_sem_F <- c(11.93430909937736, 0.6095414637034009, 0.6060645101029295, 0.612167181646899, 0.6146761002685637, 0.6096747087200697, 0.6125810476877268)
clock <- c(0.1, 0.5, 1, 1.5, 2, 2.5, 3)
plot(clock, MRT_1F, type = "o", col = "blue", ylim = c(min(MRT_1F, MRT_3F, MRT_5F, MRT_10F, MRT_15F, MRT_sem_F), max(MRT_1F)), ylab = "Response Time (Sec)", xlab = "Time Between Things Requests (seconds)")
lines(clock, MRT_3F, type = "o", col = "red")
lines(clock, MRT_5F, type = "o", col = "green")
lines(clock, MRT_10F, type = "o", col = "purple")
lines(clock, MRT_15F, type = "o", col = "orange")
lines(clock, MRT_sem_F, type = "o", col = "black")
legend("topright", legend = c("1 Fog", "3 Fogs", "5 Fogs", "10 Fogs", "15 Fogs", "w/o Fog"), col = c("blue", "red", "green", "purple", "orange", "black"), lty = 1, pch = 1)
barplot(matrix(c(MRT_sem_F, MRT_1F), nrow = 2, byrow = TRUE), beside = TRUE, col = c("#E6E6E6", "#666666"), log = "y", names.arg = clock, ylab = "Response Time (s)", xlab = "Time between Things requests")
legend("topright", legend = c("w/o Fog", "1 Fog"), col = c("gray", "black"), pch = c(0,15))
MRT_1F <- c(517.1468515630205, 85.13094142168089, 30.333207896694553, 12.694776264558937, 3.3041601673945418, 1.1823111717498882, 1.1892293502386786)
MRT_3F <- c(156.68929936163462, 11.540837783562276, 0.4512835621696538, 0.4509797929766453, 0.4502068233039181, 0.4496185276300172, 0.4543157082191288)
MRT_5F <- c(83.90319666471157, 0.3068151086494968, 0.30522314133037304, 0.3072588968084928, 0.30655265997285697, 0.3055812715727718, 0.3053297166713006)
MRT_10F <- c(29.55430642951759, 0.19832832665772515, 0.1971923924717474, 0.19796648905716516, 0.19615594370806338, 0.2034569237883263, 0.19617420889447737)
MRT_15F <- c(11.317736530583566, 0.167364215666193, 0.16172168266811013, 0.16701085329580515, 0.1598052657153692, 0.1645934043532696, 0.16216563797118075)
MRT_sem_F <- c(11.93430909937736, 0.6095414637034009, 0.6060645101029295, 0.612167181646899, 0.6146761002685637, 0.6096747087200697, 0.6125810476877268)
clock <- c(0.1, 0.5, 1, 1.5, 2, 2.5, 3)
plot(clock, MRT_1F, type = "o", col = "blue", ylim = c(min(MRT_1F, MRT_3F, MRT_5F, MRT_10F, MRT_15F, MRT_sem_F), max(MRT_1F)), ylab = "Response Time (Sec)", xlab = "Time Between Things Requests (seconds)")
lines(clock, MRT_3F, type = "o", col = "red")
lines(clock, MRT_5F, type = "o", col = "green")
lines(clock, MRT_10F, type = "o", col = "purple")
lines(clock, MRT_15F, type = "o", col = "orange")
lines(clock, MRT_sem_F, type = "o", col = "black")
legend("topright", legend = c("1 Fog", "3 Fogs", "5 Fogs", "10 Fogs", "15 Fogs", "w/o Fog"), col = c("blue", "red", "green", "purple", "orange", "black"), lty = 1, pch = 1)
barplot(matrix(c(MRT_sem_F, MRT_1F), nrow = 2, byrow = TRUE), beside = TRUE, col = c("#E6E6E6", "#666666"), log = "y", names.arg = clock, ylab = "Response Time (s)", xlab = "Time between Things requests")
legend("topright", legend = c("w/o Fog", "1 Fog"), col = c("gray", "black"), pch = c(0,15))
barplot(matrix(c(MRT_sem_F, MRT_3F), nrow = 2, byrow = TRUE), beside = TRUE, col = c("#E6E6E6", "#666666"), log = "y", names.arg = clock, ylab = "Response Time (s)", xlab = "Time between Things requests")
legend("topright", legend = c("w/o Fog", "3 Fogs"), col = c("gray", "black"), pch = c(0,15))
barplot(matrix(c(MRT_sem_F, MRT_5F), nrow = 2, byrow = TRUE), beside = TRUE, col = c("#E6E6E6", "#666666"), log = "y", names.arg = clock, ylab = "Response Time (s)", xlab = "Time between Things requests")
legend("topright", legend = c("w/o Fog", "5 Fogs"), col = c("gray", "black"), pch = c(0,15))
barplot(matrix(c(MRT_sem_F, MRT_10F), nrow = 2, byrow = TRUE), beside = TRUE, col = c("#E6E6E6", "#666666"), log = "y", names.arg = clock, ylab = "Response Time (s)", xlab = "Time between Things requests")
legend("topright", legend = c("w/o Fog", "10 Fogs"), col = c("gray", "black"), pch = c(0,15))
barplot(matrix(c(MRT_sem_F, MRT_15F), nrow = 2, byrow = TRUE), beside = TRUE, col = c("#E6E6E6", "#666666"), log = "y", names.arg = clock, ylab = "Response Time (s)", xlab = "Time between Things requests")
legend("topright", legend = c("w/o Fog", "15 Fogs"), col = c("gray", "black"), pch = c(0,15))
plot(clock, MRT_1F, type = "X", col = "black", ylim = c(min(MRT_1F, MRT_3F, MRT_5F, MRT_10F, MRT_15F, MRT_sem_F), max(MRT_1F)), ylab = "Response Time (Sec)", xlab = "Time Between Things Requests (seconds)")
plot(clock, MRT_1F, type = "o", col = "black",
ylim = c(min(MRT_1F, MRT_3F, MRT_5F, MRT_10F, MRT_15F, MRT_sem_F),
max(MRT_1F)),
ylab = "Response Time (Sec)",
xlab = "Time Between Things Requests (seconds)")
lines(clock, MRT_3F, type = "o", col = "yellow")
lines(clock, MRT_5F, type = "o", col = "red")
lines(clock, MRT_10F, type = "o", col = "blue")
lines(clock, MRT_15F, type = "o", col = "purple")
lines(clock, MRT_sem_F, type = "o", col = "green")
legend("topright", legend = c("1 Fog", "3 Fogs", "5 Fogs", "10 Fogs", "15 Fogs", "w/o Fog"),
col = c("black", "yellow", "red", "blue", "purple", "green"),
lty = 1, pch = 1)
plot(clock, MRT_1F, type = "o", col = "black", pch = 4,  # "x"
ylim = c(min(MRT_1F, MRT_3F, MRT_5F, MRT_10F, MRT_15F, MRT_sem_F),
max(MRT_1F)),
ylab = "Response Time (Sec)",
xlab = "Time Between Things Requests (seconds)")
lines(clock, MRT_3F, type = "o", col = "yellow", pch = 3)  # "+"
lines(clock, MRT_5F, type = "o", col = "red", pch = 1)     # "o" (círculo)
lines(clock, MRT_10F, type = "o", col = "blue", pch = 2)   # Triângulo
lines(clock, MRT_15F, type = "o", col = "purple", pch = 5) # Diamante
lines(clock, MRT_sem_F, type = "o", col = "green", pch = 4) # "x" de novo
legend("topright", legend = c("1 Fog", "3 Fogs", "5 Fogs", "10 Fogs", "15 Fogs", "w/o Fog"),
col = c("black", "yellow", "red", "blue", "purple", "green"),
pch = c(4, 3, 1, 2, 5, 4),  # Define os símbolos corretamente
lty = 1)
# Dados da tabela
quality_rating <- c("Good", "Very Good", "Excellent")
meal_price <- c("$10-19", "$20-29", "$30-39", "$40-49")
data <- matrix(c(53.8, 33.9, 2.6, 0.0,
43.6, 54.2, 60.5, 21.4,
2.6, 11.9, 36.8, 78.6),
nrow = 3, byrow = TRUE)
rownames(data) <- quality_rating
colnames(data) <- meal_price
barplot(data, beside = FALSE, col = c("#1f77b4", "#ff7f0e", "#2ca02c"),
xlab = "Meal Price", ylab = "Percentage",
main = "Quality Rating by Meal Price",
legend.text = rownames(data),
args.legend = list(x = "topright", inset = c(0, -0.31)))
dados <- data.frame(
Qualidade = c("Good", "Very Good", "Excellent"),
`10-19` = c(53.8, 43.6, 2.6),
`20-29` = c(33.9, 54.2, 11.9),
`30-39` = c(2.6, 60.5, 36.8),
`40-49` = c(0.0, 21.4, 78.6)
)
barplot(data, beside = FALSE, col = c("#1f77b4", "#ff7f0e", "#2ca02c"),
xlab = "Meal Price", ylab = "Percentage",
main = "Quality Rating by Meal Price",
legend.text = rownames(data),
args.legend = list(x = "topright", inset = c(0, -0.31)))
ggplot(dados_melt, aes(x = Faixa_Preco, y = Percentual, fill = Qualidade)) +
geom_bar(stat = "identity") +
labs(title = "Classificação da Qualidade das Refeições por Faixa de Preço",
x = "Faixa de Preço ($)",
y = "Percentual (%)") +
scale_fill_manual(values = c("Good" = "blue", "Very Good" = "orange", "Excellent" = "red")) +
theme_minimal() +
theme(legend.title = element_blank())
ggplot(dados_melt, aes(x = Faixa_Preco, y = Percentual, fill = Qualidade)) +
geom_bar(stat = "identity") +
labs(title = "Classificação da Qualidade das Refeições por Faixa de Preço",
x = "Faixa de Preço ($)",
y = "Percentual (%)") +
scale_fill_manual(values = c("Good" = "blue", "Very Good" = "orange", "Excellent" = "red")) +
theme_minimal() +
theme(legend.title = element_blank())
dados_melt <- melt(dados, id.vars = "Qualidade", variable.name = "Faixa_Preco", value.name = "Percentual")
dados_melt <- melt(dados, id.vars = "Qualidade", variable.name = "Faixa_Preco", value.name = "Percentual")
dados_melt <- melt(dados, id.vars = "Qualidade", variable.name = "Faixa_Preco", value.name = "Percentual")
barplot(data, beside = FALSE, col = c("#1f77b4", "#ff7f0e", "#2ca02c"),
xlab = "Meal Price", ylab = "Percentage",
main = "Quality Rating by Meal Price",
legend.text = rownames(data),
args.legend = list(x = "topright", inset = c(0, -0.31)))
# Dados da tabela
quality_rating <- c("Good", "Very Good", "Excellent")
meal_price <- c("$10-19", "$20-29", "$30-39", "$40-49")
dados <- data.frame(
Qualidade = c("Good", "Very Good", "Excellent"),
`10-19` = c(53.8, 43.6, 2.6),
`20-29` = c(33.9, 54.2, 11.9),
`30-39` = c(2.6, 60.5, 36.8),
`40-49` = c(0.0, 21.4, 78.6)
)
barplot(data, beside = FALSE, col = c("#1f77b4", "#ff7f0e", "#2ca02c"),
xlab = "Meal Price", ylab = "Percentage",
main = "Quality Rating by Meal Price",
legend.text = rownames(data),
args.legend = list(x = "topright", inset = c(0, -0.31)))
barplot(data, beside = FALSE,
col = c("#4C72B0", "#DD8452", "#55A868"),  # Azul, laranja e verde suaves
xlab = "Meal Price",
ylab = "Percentage",
main = "Quality Rating by Meal Price",
legend.text = rownames(data),
args.legend = list(x = "topright", inset = c(0, -0.31)))
library(ggplot2)
library(dplyr)
data("airquality")
dados_maio <- airquality %>% filter(Month == 5)
dados_maio$Temp_C <- (dados_maio$Temp - 32) / 1.8
ggplot(dados_maio, aes(x = Temp_C)) +
geom_histogram(aes(y = after_stat(density)), bins = 10, fill = "skyblue", color = "black", alpha = 0.7) +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribuicao das Temperaturas em Maio",
x = "Temperatura (C)",
y = "Densidade") +
theme_minimal()
library(ggplot2)
library(dplyr)
data("airquality")
data("airquality")
dados_maio <- airquality %>% filter(Month == 5)
dados_maio$Temp_C <- (dados_maio$Temp - 32) / 1.8
ggplot(dados_maio, aes(x = Temp_C)) +
geom_histogram(aes(y = after_stat(density)), bins = 10, fill = "skyblue", color = "black", alpha = 0.7) +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribuicao das Temperaturas em Maio",
x = "Temperatura (C)",
y = "Densidade") +
theme_minimal()
ggplot(dados_maio, aes(x = Temp_C)) +
geom_histogram(aes(y = after_stat(density)), bins = 10, fill = "skyblue", color = "black", alpha = 0.7) +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribuicao das Temperaturas em Maio",
x = "Temperatura (C)",
y = "Densidade") +
theme_minimal()
ggplot(dados_maio, aes(x = Temp_C)) +
geom_histogram(aes(y = after_stat(density)), bins = 10, fill = "skyblue", color = "black", alpha = 0.7) +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribuicao das Temperaturas em Maio",
x = "Temperatura (C)",
y = "Densidade") +
theme_minimal()
# Carregando o dataset
data("airquality")
# Filtrando apenas os dados do mês de Maio (Month == 5) e convertendo para Celsius
airquality$Temp_C <- (airquality$Temp - 32) / 1.8
dados_maio <- subset(airquality, Month == 5, select = Temp_C)
# Criando o histograma com curva de densidade
ggplot(dados_maio, aes(x = Temp_C)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill = "#69b3a2", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1.2) +
labs(title = "Histograma das Temperaturas de Maio",
x = "Temperatura (°C)",
y = "Densidade") +
theme_minimal()
library(ggplot2)
library(dplyr)
data("airquality")
dados_maio <- airquality %>% filter(Month == 5)
dados_maio$Temp_C <- (dados_maio$Temp - 32) / 1.8
ggplot(dados_maio, aes(x = Temp_C)) +
geom_histogram(aes(y = after_stat(density)), bins = 10, fill = "skyblue", color = "black", alpha = 0.7) +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribuicao das Temperaturas em Maio",
x = "Temperatura (C)",
y = "Densidade") +
theme_minimal()
# Carregando o dataset
data("airquality")
# Filtrando apenas os dados do mês de Maio (Month == 5) e convertendo para Celsius
airquality$Temp_C <- (airquality$Temp - 32) / 1.8
dados_maio <- subset(airquality, Month == 5, select = Temp_C)
# Criando o histograma com curva de densidade
ggplot(dados_maio, aes(x = Temp_C)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill = "orange", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1.2) +
labs(title = "Histograma das Temperaturas de Maio",
x = "Temperatura (°C)",
y = "Densidade") +
theme_minimal()
# Carregando o dataset
data("airquality")
# Filtrando apenas os dados do mês de Maio (Month == 5) e convertendo para Celsius
airquality$Temp_C <- (airquality$Temp - 32) / 1.8
dados_maio <- subset(airquality, Month == 5, select = Temp_C)
# Criando o histograma com curva de densidade
ggplot(dados_maio, aes(x = Temp_C)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1.2) +
labs(title = "Histograma das Temperaturas de Maio",
x = "Temperatura (°C)",
y = "Densidade") +
theme_minimal()
airquality$Temp_C <- (airquality$Temp - 32) / 1.8
dados_maio <- subset(airquality, Month == 5, select = Temp_C)
ggplot(dados_maio, aes(x = Temp_C)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1.2) +
labs(title = "Histograma das Temperaturas de Maio",
x = "Temperatura (°C)",
y = "Densidade") +
theme_minimal()
airquality$Temp_C <- (airquality$Temp - 32) / 1.8
dados_maio <- subset(airquality, Month == 5, select = Temp_C)
ggplot(dados_maio, aes(x = Temp_C)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
geom_density(color = "red", size = 1.2) +
labs(title = "Histograma das Temperaturas de Maio",
x = "Temperatura (°C)",
y = "Densidade") +
theme_minimal()
# Carregando o dataset
data("InsectSprays")
# Criando o boxplot sem outliers
ggplot(InsectSprays, aes(x = spray, y = count, fill = spray)) +
geom_boxplot(outlier.shape = NA, fill = "yellow", color = "black") +
labs(title = "Boxplot das Contagens de Insetos por Inseticida",
x = "Tipo de Inseticida",
y = "Contagem de Insetos") +
theme_minimal()
data("InsectSprays")
boxplot(count ~ spray, data = InsectSprays,
col = "yellow",  # Preencher as caixas com a cor "yellow"
outline = FALSE,  # Remover os outliers
main = "Contagem de Insetos por Tipo de Inseticida",
xlab = "Tipo de Inseticida",
ylab = "Contagem de Insetos")
ggplot(InsectSprays, aes(x = spray, y = count, fill = spray)) +
geom_boxplot(outlier.shape = NA, fill = "yellow", color = "black") +
labs(title = "Boxplot das Contagens de Insetos por Inseticida",
x = "Tipo de Inseticida",
y = "Contagem de Insetos") +
theme_minimal()
ggplot(InsectSprays, aes(x = spray, y = count, fill = spray)) +
geom_boxplot(outlier.shape = NA, fill = "yellow", color = "black") +
labs(title = "Boxplot das Contagens de Insetos por Inseticida",
x = "Tipo de Inseticida",
y = "Contagem de Insetos") +
theme_minimal()
library(dplyr)
library(plotly)
# Função para carregar e processar os dados
processar_dados <- function(file) {
# Carregar CSV
dados <- read.csv(file, stringsAsFactors = FALSE)
# Converter currentTime para formato de data/hora
dados$currentTime <- as.POSIXct(dados$currentTime, format = "%Y-%m-%d %H:%M:%S")
# Ajustar a coluna de tempo para um eixo contínuo (em horas)
dados$timeElapsed <- as.numeric(difftime(dados$currentTime, min(dados$currentTime), units = "hours"))
# Converter usedMemory para megabytes
dados$usedMemory_MB <- as.numeric(gsub("([0-9\\.]+)\\s*([A-Za-z]+)", "\\1", dados$usedMemory))
unidades <- gsub("[0-9\\.]+\\s*", "", dados$usedMemory)
# Aplicar conversão
dados$usedMemory_MB[unidades == "TB"] <- dados$usedMemory_MB[unidades == "TB"] * 1000000
dados$usedMemory_MB[unidades == "GB"] <- dados$usedMemory_MB[unidades == "GB"] * 1024
dados$usedMemory_MB[unidades == "MB"] <- dados$usedMemory_MB[unidades == "MB"]
return(dados)
}
# Lista de arquivos
arquivos <- c("monitoringCloudData_0.1.csv",
"monitoringCloudData_0.5.csv",
"monitoringCloudData_1.csv",
"monitoringCloudData_NONE.csv")
# Processar cada arquivo
dados_list <- lapply(arquivos, processar_dados)
# Configurar layout para múltiplos gráficos
par(mfrow = c(2,2), mar = c(4, 4, 2, 1))
# Plotar os gráficos
nomes <- c("0.1 Load", "0.5 Load", "1 Load", "No Load")
for (i in 1:length(dados_list)) {
plot(dados_list[[i]]$timeElapsed, dados_list[[i]]$usedMemory_MB,
type = "l", col = "blue", lwd = 2,
xlab = "Tempo (horas)", ylab = "Memória Usada (MB)",
main = paste("Uso de Memória -", nomes[i]))
}
# Função para carregar e processar os dados
processar_dados <- function(file) {
# Carregar CSV
dados <- read.csv(file, stringsAsFactors = FALSE)
# Converter currentTime para formato de data/hora
dados$currentTime <- as.POSIXct(dados$currentTime, format = "%Y-%m-%d %H:%M:%S")
# Ajustar a coluna de tempo para um eixo contínuo (em horas)
dados$timeElapsed <- as.numeric(difftime(dados$currentTime, min(dados$currentTime), units = "hours"))
# Converter usedMemory para megabytes
dados$usedMemory_MB <- as.numeric(gsub("([0-9\\.]+)\\s*([A-Za-z]+)", "\\1", dados$usedMemory))
unidades <- gsub("[0-9\\.]+\\s*", "", dados$usedMemory)
# Aplicar conversão
dados$usedMemory_MB[unidades == "TB"] <- dados$usedMemory_MB[unidades == "TB"] * 1000000
dados$usedMemory_MB[unidades == "GB"] <- dados$usedMemory_MB[unidades == "GB"] * 1024
dados$usedMemory_MB[unidades == "MB"] <- dados$usedMemory_MB[unidades == "MB"]
return(dados)
}
# Lista de arquivos
arquivos <- c("monitoringCloudData_0.1.csv",
"monitoringCloudData_0.5.csv",
"monitoringCloudData_1.csv",
"monitoringCloudData_NONE.csv")
# Processar cada arquivo
dados_list <- lapply(arquivos, processar_dados)
# Configurar layout para múltiplos gráficos
par(mfrow = c(2,2), mar = c(4, 4, 2, 1))
# Plotar os gráficos
nomes <- c("0.1 Load", "0.5 Load", "1 Load", "No Load")
for (i in 1:length(dados_list)) {
plot(dados_list[[i]]$timeElapsed, dados_list[[i]]$usedMemory_MB,
type = "l", col = "blue", lwd = 2,
xlab = "Tempo (horas)", ylab = "Memória Usada (MB)",
main = paste("Uso de Memória -", nomes[i]))
}
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
# Carregar os dados
data_0_1 <- read.csv("monitoringCloudData_0.1.csv")
data_0_5 <- read.csv("monitoringCloudData_0.5.csv")
data_1 <- read.csv("monitoringCloudData_1.csv")
data_none <- read.csv("monitoringCloudData_NONE.csv")
# Função para ajustar a coluna currentTime e usedMemory
ajustar_dados <- function(data) {
# Converter currentTime para formato Date
data$currentTime <- as.POSIXct(data$currentTime, format="%Y-%m-%d %H:%M:%S", tz="UTC")
# Calcular a diferença do tempo em horas (difftime)
data$tempo_em_horas <- as.numeric(difftime(data$currentTime, min(data$currentTime), units="hours"))
# Converter usedMemory para megabytes
data$usedMemory <- gsub("GB", "", data$usedMemory)
data$usedMemory <- as.numeric(data$usedMemory) * 1024  # Converte GB para MB
data$usedMemory[data$usedMemory == "TB"] <- 1000000 # Converte TB para MB
return(data)
}
# Ajustando os dados
data_0_1 <- ajustar_dados(data_0_1)
data_0_5 <- ajustar_dados(data_0_5)
data_1 <- ajustar_dados(data_1)
data_none <- ajustar_dados(data_none)
# Plotando os gráficos
layout(matrix(1:4, ncol=2))
# Gráfico 1
plot(data_0_1$tempo_em_horas, data_0_1$usedMemory, type="l", col="blue", xlab="Tempo (horas)", ylab="Memória Usada (MB)", main="Monitoramento 0.1")
# Gráfico 2
plot(data_0_5$tempo_em_horas, data_0_5$usedMemory, type="l", col="red", xlab="Tempo (horas)", ylab="Memória Usada (MB)", main="Monitoramento 0.5")
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
# Carregar os dados
data_0_1 <- read.csv("monitoringCloudData_0.1.csv")
data_0_5 <- read.csv("monitoringCloudData_0.5.csv")
data_1 <- read.csv("monitoringCloudData_1.csv")
data_none <- read.csv("monitoringCloudData_NONE.csv")
# Função para ajustar a coluna currentTime e usedMemory
ajustar_dados <- function(data) {
# Converter currentTime para formato Date
data$currentTime <- as.POSIXct(data$currentTime, format="%Y-%m-%d %H:%M:%S", tz="UTC")
# Calcular a diferença do tempo em horas (difftime)
data$tempo_em_horas <- as.numeric(difftime(data$currentTime, min(data$currentTime), units="hours"))
# Converter usedMemory para megabytes
data$usedMemory <- gsub("GB", "", data$usedMemory)
data$usedMemory <- as.numeric(data$usedMemory) * 1024  # Converte GB para MB
data$usedMemory[data$usedMemory == "TB"] <- 1000000 # Converte TB para MB
return(data)
}
# Ajustando os dados
data_0_1 <- ajustar_dados(data_0_1)
data_0_5 <- ajustar_dados(data_0_5)
data_1 <- ajustar_dados(data_1)
data_none <- ajustar_dados(data_none)
# Plotando os gráficos
layout(matrix(1:4, ncol=2))
# Gráfico 1
plot(data_0_1$tempo_em_horas, data_0_1$usedMemory, type="l", col="blue", xlab="Tempo (horas)", ylab="Memória Usada (MB)", main="Monitoramento 0.1")
# Gráfico 2
plot(data_0_5$tempo_em_horas, data_0_5$usedMemory, type="l", col="red", xlab="Tempo (horas)", ylab="Memória Usada (MB)", main="Monitoramento 0.5")
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
# Carregar os dados
data_0_1 <- read.csv("monitoringCloudData_0.1.csv")
data_0_5 <- read.csv("monitoringCloudData_0.5.csv")
data_1 <- read.csv("monitoringCloudData_1.csv")
data_none <- read.csv("monitoringCloudData_NONE.csv")
# Função para ajustar a coluna currentTime e usedMemory
ajustar_dados <- function(data) {
# Converter currentTime para formato Date
data$currentTime <- as.POSIXct(data$currentTime, format="%Y-%m-%d %H:%M:%S", tz="UTC")
# Calcular a diferença do tempo em horas (difftime)
data$tempo_em_horas <- as.numeric(difftime(data$currentTime, min(data$currentTime), units="hours"))
# Converter usedMemory para megabytes
data$usedMemory <- gsub("GB", "", data$usedMemory)
data$usedMemory <- as.numeric(data$usedMemory) * 1024  # Converte GB para MB
data$usedMemory[data$usedMemory == "TB"] <- 1000000 # Converte TB para MB
return(data)
}
# Ajustando os dados
data_0_1 <- ajustar_dados(data_0_1)
data_0_5 <- ajustar_dados(data_0_5)
data_1 <- ajustar_dados(data_1)
data_none <- ajustar_dados(data_none)
# Plotando os gráficos
layout(matrix(1:4, ncol=2))
# Gráfico 1
plot(data_0_1$tempo_em_horas, data_0_1$usedMemory, type="l", col="blue", xlab="Tempo (horas)", ylab="Memória Usada (MB)", main="Monitoramento 0.1")
# Gráfico 2
# Remover valores ausentes ou infinitos
data_0_5 <- data_0_5[complete.cases(data_0_5$tempo_em_horas, data_0_5$usedMemory), ]
plot(data_0_5$tempo_em_horas, data_0_5$usedMemory, type="l", col="red", xlab="Tempo (horas)", ylab="Memória Usada (MB)", main="Monitoramento 0.5")
# Gráfico 2
# Gráfico 3
plot(data_1$tempo_em_horas, data_1$usedMemory, type="l", col="green", xlab="Tempo (horas)", ylab="Memória Usada (MB)", main="Monitoramento 1")
# Gráfico 4
plot(data_none$tempo_em_horas, data_none$usedMemory, type="l", col="purple", xlab="Tempo (horas)", ylab="Memória Usada (MB)", main="Monitoramento NONE")
# Gráfico 1
plot(data_0_1$tempo_em_horas, data_0_1$usedMemory, type="l", col="blue", xlab="Tempo (horas)", ylab="Memória Usada (MB)", main="Monitoramento 0.1")
# Carregar pacotes necessários
library(dplyr)
library(plotly)
# Carregar pacotes necessários
library(dplyr)
library(plotly)
install.packages("plotly")
install.packages("plotly")
library(plotly)
# Carregar pacotes necessários
library(dplyr)
install.packages("plotly")
library(plotly)
# Carregar o dataset
netflix_data <- read.csv("netflix_titles.csv")
# Verificar as primeiras linhas do dataset para garantir que as colunas estejam corretas
head(netflix_data)
install.packages("plotly")
# Carregar pacotes necessários
library(dplyr)
install.packages("plotly")
library(plotly)
# Carregar o dataset
netflix_data <- read.csv("netflix_titles.csv")
# Verificar as primeiras linhas do dataset para garantir que as colunas estejam corretas
head(netflix_data)
install.packages("plotly")
getwd()
getwd()
setwd("C:/Faculdade/Repositorios/Repositorio_Academico_Multidisciplinar/Computacao_Dados/Projeto_2")
getwd()
setwd("C:/Users/Pichau/Desktop/Faculdade/Projects/Repositorio_Academico_Multidisciplinar/Computacao_Dados/Projeto_FINAL")
dados <- read.csv("Crime_Data_from_2020_to_Present.csv")
```{r}
getwd()
setwd("C:/Users/Pichau/Desktop/Faculdade/Projects/Repositorio_Academico_Multidisciplinar/Computacao_Dados/Projeto_FINAL")
dados <- read.csv("Crime_Data_from_2020_to_Present.csv")
getwd()
setwd("C:/Users/Pichau/Desktop/Faculdade/Projects/Repositorio_Academico_Multidisciplinar/Computacao_Dados/Projeto_FINAL")
dados <- read.csv("Crime_Data_from_2020_to_Present.csv")
print(head(dados))
View(dados)
